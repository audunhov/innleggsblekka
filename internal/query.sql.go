// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package internal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (Title, Body, CreatorId, ApprovedBy) VALUES ($1, $2, $3, $4) RETURNING id, title, body, creatorid, createdat, approvedby
`

type CreatePostParams struct {
	Title      string
	Body       string
	Creatorid  int32
	Approvedby pgtype.Int4
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Title,
		arg.Body,
		arg.Creatorid,
		arg.Approvedby,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Creatorid,
		&i.Createdat,
		&i.Approvedby,
	)
	return i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (PostId, Tag) VALUES ($1, $2) RETURNING id, postid, createdat, tag
`

type CreateTagParams struct {
	Postid int32
	Tag    string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, arg.Postid, arg.Tag)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Postid,
		&i.Createdat,
		&i.Tag,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE Id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags WHERE Id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTag, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE Id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, body, creatorid, createdat, approvedby FROM posts WHERE Id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Creatorid,
		&i.Createdat,
		&i.Approvedby,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, createdat, isadmin FROM users WHERE Email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Createdat,
		&i.Isadmin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, createdat, isadmin FROM users WHERE Id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Createdat,
		&i.Isadmin,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (Name, Email) VALUES ($1, $2) RETURNING id, name, email, createdat, isadmin
`

type InsertUserParams struct {
	Name  string
	Email string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Createdat,
		&i.Isadmin,
	)
	return i, err
}

const listApprovedPosts = `-- name: ListApprovedPosts :many
SELECT id, title, body, creatorid, createdat, approvedby FROM posts WHERE ApprovedBy IS NOT NULL
`

func (q *Queries) ListApprovedPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listApprovedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Creatorid,
			&i.Createdat,
			&i.Approvedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotApprovedPosts = `-- name: ListNotApprovedPosts :many
SELECT id, title, body, creatorid, createdat, approvedby FROM posts WHERE ApprovedBy IS NULL
`

func (q *Queries) ListNotApprovedPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listNotApprovedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Creatorid,
			&i.Createdat,
			&i.Approvedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many

SELECT id, title, body, creatorid, createdat, approvedby FROM posts
`

// POSTS --
func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Creatorid,
			&i.Createdat,
			&i.Approvedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByCreator = `-- name: ListPostsByCreator :many
SELECT id, title, body, creatorid, createdat, approvedby FROM posts WHERE CreatorId = $1
`

func (q *Queries) ListPostsByCreator(ctx context.Context, creatorid int32) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByCreator, creatorid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Creatorid,
			&i.Createdat,
			&i.Approvedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByTag = `-- name: ListPostsByTag :many
SELECT posts.id, posts.title, posts.body, posts.creatorid, posts.createdat, posts.approvedby FROM posts INNER JOIN tags ON posts.Id = tags.PostId WHERE tags.Id = $1
`

func (q *Queries) ListPostsByTag(ctx context.Context, id int32) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByTag, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Creatorid,
			&i.Createdat,
			&i.Approvedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many

SELECT id, postid, createdat, tag FROM tags
`

// TAGS --
func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Postid,
			&i.Createdat,
			&i.Tag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsByPost = `-- name: ListTagsByPost :many
SELECT id, postid, createdat, tag FROM tags WHERE Id = $1
`

func (q *Queries) ListTagsByPost(ctx context.Context, id int32) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTagsByPost, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Postid,
			&i.Createdat,
			&i.Tag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many

SELECT id, name, email, createdat, isadmin FROM users
`

// USERS --
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Createdat,
			&i.Isadmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
